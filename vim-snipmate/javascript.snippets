snippet desc "Describe" b
	describe('${1:}', function() {//{{{
		it('${2}', function() {
			${0}
			assert.equal("", "");
		});
	});//}}}
snippet it "it" b
	it('${1:}', function() {
		${0}
	});
snippet exp "expect" b
	expect(${1:})${0};
snippet expe "expect" b
	expect(${1:}).to.equal(${0});
snippet expd "expect" b
	expect(${1:}).to.deep.equal(${0});

snippet class
	function ${1:function_name}() {//{{{ 
		${0}
	}//}}}
	var o = $1.prototype;
	o.xxx = function() {
	}
snippet mocha
	var assert = require('assert');

	describe("Test Method ", function() {//{{{ 
	    it("normal case", function() {
	        assert.equal("", "");
	    }); 
	});//}}}
snippet promise
	Q.Promise(function (resolve, reject, notify) {
		${0}
	});
snippet multiline
	var s=`aaa
		${0}
	`
snippet foreach
	${1}.forEach(function(val, index) {
		$(0)	
	});
snippet proto
	o.${1} = function() {
		$(0)
	}
snippet log
	console.log(${0});
snippet options
	var param = require('commander');

	param.version('0.0.1')
	    .option('-d, --debug [type]', 'enable debug or not', 'default')
	    .parse(process.argv);

	if (param.debug === "true") console.log('Enable debug');
snippet chr
	String.fromCharCode(${0});
snippet ord
	${0}charAt(0);
