snippet class
	class ${1:`vim_snippets#Filename()`}
	{
		${0}
		/**
		 * construct
		 *
		 */
		public function __consturct() {

		}
	}
snippet unit
	class testMyClass extends PHPUnit_Framework_TestCase {
		public $tester;
		protected function setUp()
		{
			${0}
		}

		protected function tearDown()
		{

	    }
	}

snippet switch "switch($var) { case 'xyz': ... default: .... }"
	switch ($${1:variable}) {
		case '${2:value}':
			break;
		default:
			break;
	}
snippet for "for ($i = 0; $i < $count; $i++) { ... }"
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
snippet log
	error_log(print_r(${1}, 1), 3, '/tmp/php.log');

snippet provider
	public function provider${1:name}()
	{
	    $data = array();
	    $expect = 1;
	    $data[] = array($expect);                                                                                                                             
	    return $data;
	}   
	/**                                                                                                                                                            * @dataProvider provider$1
	 */  
	public function test$1($expect)
	{   
	    ${0}
	}   

snippet mock "PHPUnit / Mock Builder"
	\$this
	->getMockBuilder('${1}')
	->setMethods(array(${2}))
	->disableOriginalConstructor()
	->getMock()${0}
	endsnippet

snippet option
	$n = $_SERVER['argc'];
	$param;
	for ($i = 1; $i < $n; $i+=2) {
	    $key = preg_replace('/^\-{2,2}/', '', $_SERVER['argv'][$i]);
	    $value = $_SERVER['argv'][$i + 1]; 
	    $param[$key] = $value;
	}
