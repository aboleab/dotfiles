snippet ase "$this->assertEquals()"
	$this->assertEquals(${1:expected}, ${2:actual});

snippet case "case 'value': ... break"
	case '${1:value}':
		${2}
		break;
snippet class
	class ${1:`vim_snippets#Filename()`}
	{
		${0}
		/**
		 * construct
		 *
		 */
		public function __construct() 
		{

		}
	}
snippet unit
	class testMyClass extends PHPUnit_Framework_TestCase {
		public $tester;
		protected function setUp()
		{
			${0}
		}

		protected function tearDown()
		{

	    }
	}

snippet unit_private
	$ref = new ReflectionClass('food');
	$method = $ref->getMethod('getName');
	$method->setAccessible(true);
	$name = $method->invokeArgs($obj, array());
	$this->assertEquals('chicken', $name);

snippet switch "switch($var) { case 'xyz': ... default: .... }"
	switch ($${1:variable}) {
		case '${2:value}':
			break;
		default:
			break;
	}
snippet for "for ($i = 0; $i < $count; $i++) { ... }"
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
snippet func
	function ${1}(${0}) 
	{//{{{
	
	}//}}}

snippet log
	error_log("LOG: " . __LINE__ . ", " . print_r(${1}, 1) . " \n", 3, '/tmp/php.log');
snippet er
	error_log("LOG: ".__LINE__ ."${1}");

snippet provider
	public function provider${1:name}() 
	{//{{{
	    $data = array();
	    $expect = 1;
	    $data[] = array($expect); 
	    return $data;
	}//}}}
	
	/**
	 * @dataProvider provider$1
	 */
	public function test$1($expect) 
	{//{{{
	    ${0}
	}//}}}

snippet mock "PHPUnit / Mock Builder"
	\$this
	->getMockBuilder('${1}')
	->setMethods(array(${2}))
	->disableOriginalConstructor()
	->getMock()${0}
	endsnippet

snippet option
	$n = $_SERVER['argc'];
	$param;
	for ($i = 1; $i < $n; $i+=2) {
	    $key = preg_replace('/^\-{2,2}/', '', $_SERVER['argv'][$i]);
	    $value = $_SERVER['argv'][$i + 1]; 
	    $param[$key] = $value;
	}

snippet wh "while (condition) { ... }"
	while (${1:/* condition */}) {
		${0}
	}
snippet do "do { ... } while (condition)"
	do {
		${0}
	} while (${1});

snippet if "if (condition) { ... }"
	if (${1}) {
		${0}
	}

snippet ife "if (cond) { ... } else { ... }"
	if (${1}) {
		${2}
	} else {
		${3}
	}
	${0}

snippet arrexist
	in_array(${1:/*needle*/}, ${2:/*array haystack*/});

snippet arrsearch
	array_search(${1:/*$needle*/}, ${2:/*$haystack*/});

snippet try "try { ... } catch (Exception $e) { ... }"
	try {
		${0}
	} catch (Exception $e) {

	}

snippet pr
	print_r(${0});

snippet /*
	/**
	 * ${1}
	 */ 

snippet curl_init
	$c = curl_init();
	curl_setopt($c, CURLOPT_URL, $url);
	curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($c, CURLOPT_FOLLOWLOCATION, true);
	curl_setopt($c, CURLOPT_SSLVERSION, 6); //tls1.2
	$data = curl_exec($c);
	$httpCode = curl_getinfo($c, CURLINFO_HTTP_CODE);
	curl_close($c);

snippet curl_post
	curl_setopt($c, CURLOPT_POST, true);
	curl_setopt($c, CURLOPT_POSTFIELDS, http_build_query(array("x"=>"v"))); 

snippet curl_header
	curl_setopt($ch, CURLOPT_HTTPHEADER, array("cookie: xxx"));


snippet empty
	empty

snippet isset
	isset

snippet path_file
	__FILE__

snippet dirpath
	__DIR__

snippet path_cwd
	getcwd()

snippet cwd
	getcwd()

snippet date_format
	$fmt = new IntlDateFormatter(
		'zh-Hant-TW',
		IntlDateFormatter::FULL,
		IntlDateFormatter::FULL,
		'Asia/Taipei',
		IntlDateFormatter::GREGORIAN,
		"YYYY/MM/dd"
	);
	$date = $fmt->format(time());
