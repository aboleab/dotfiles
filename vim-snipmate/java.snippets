snippet log
	System.out.println(${1});

snippet logline
	System.out.println(new Throwable().getStackTrace()[0].getLineNumber());

snippet logger
	private static final Logger LOG = LoggerFactory.getLogger(${1}.class);

snippet implogger
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
snippet implist
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.Iterator;
	import java.util.List;
snippet impjson
	import org.json.JSONObject;
	import org.json.JSONArray;
snippet impgson
	import com.google.gson.Gson;
snippet imptest
	import static org.junit.Assert.assertEquals;
	import static org.junit.Assert.assertNotEquals;
	import static org.junit.Assert.assertTrue;
	import static org.mockito.Matchers.any;
	import static org.mockito.Matchers.anyInt;
	import static org.mockito.Matchers.anyString;
	import static org.mockito.Matchers.anyObject;
	import static org.mockito.Mockito.when;
	import static org.mockito.Mockito.doNothing;

snippet impinject
	import com.google.inject.Inject;

snippet impdate
	import java.text.ParseException;
	import java.text.DateFormat;
	import java.text.SimpleDateFormat;
	import java.util.Date;
	import java.sql.Timestamp;
	import java.util.Locale;

snippet impstring
	import org.apache.commons.lang3.StringUtils;

snippet imparray
	import java.util.Arrays;

snippet impexception
	import java.util.concurrent.ExecutionException;
	import java.io.IOException;

snippet impapache
	import org.apache.commons.lang3.builder.ToStringBuilder;
	import org.apache.commons.lang3.builder.ToStringStyle;

snippet impbase64
	import org.apache.commons.codec.binary.Base64;

snippet impguicebinder
	import com.google.inject.AbstractModule;
	import com.google.inject.Singleton;

snippet impguice
	import com.google.inject.Guice;
	import com.google.inject.Injector;

snippet impguavacache
	import com.google.common.cache.Cache;
	import com.google.common.cache.CacheBuilder;
	import com.google.common.cache.CacheStats;

snippet sleep
	TimeUnit.SECONDS.sleep(3);

# -----------
# JSON
# -----------
snippet jsonnew
	JSONObject jsonObject = new JSONObject("{}");
snippet jsonob
	JSONObject
snippet jsonar
	JSONArray
snippet jsonarrayfor
	for (int i = 0; i < json.length(); i++) {
		JSONObject job = json.optJSONObject(i);
	}


snippet impMap
	import java.util.Map;

snippet exdate
	try {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
		Date date = format.parse("2012-11-17T12:10:00.000+08:00");
		int d = (int)date.getTime();
		System.out.println("time = " + Integer.toString(d));
	} catch (Exception ParseException) {

	}

snippet itoa
	Integer.toString(${1});

snippet atoi
	Integer.parseInt(${1});

snippet empty
	StringUtils.isEmpty(${1});

snippet main
	public class ${1/*classname*/} {

		public static void main (String[] args) {
			${2}
		}
	}

snippet sw
	switch(${1}) {
		case 1:
			break;
		case 3:
			break;
	}

snippet for
	for (int i = 0; i < n ; i++) {
	}

snippet forMap
	for (Map.Entry<String, String> entry : map.entrySet()) {
	    System.out.println(entry.getKey() + "/" + entry.getValue());
	}

snippet list
	List<String> status = new ArrayList<>(Arrays.asList("0", "1"));

snippet arrayToList
	List<String> list = Arrays.asList(args);

snippet map
	Map<String, String> m = new HashMap<>();

snippet time
	System.currentTimeMillis();

snippet /*
	/**
	 * ${0}
	 * @param xxx xxx
	 * @return String
	 */

snippet func
	public void function ${1}() {
		${2}
	}

snippet unit
	package com.xxx;
	import static org.junit.Assert.assertEquals;
	import org.junit.*;

	public class AppTest {
		private App tester;

		@Before
		public void setUp() throws Exception {
			this.tester = new App();
		}

		@Test
		public void testApp() throws exception {
			String ret = this.tester.getLink(1);
			assertEquals("The url should be xxxx", "http://", ret);
	 	}
	}

snippet guicemodule
	package com.xx;
	import com.google.inject.AbstractModule;

	public class GuiceModule extends AbstractModule {

		@Override
		protected void configure() {
			bind(Car.class).to(CartImpl.class);
		}

	}

snippet pathCurrent
	Paths.get("").toAbsolutePath().toString()

snippet pathDir
	this.getClass().getClassLoader().getResource("").getPath()

snippet fileRead
	BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream("zzz"), "UTF8"));    
	in.close()

snippet forMap
	for (Map.Entry<String, String> entry : keys.entrySet()) {
		entry.getKey();
		entry.getValue();
	}

snippet upperCase
	str.toUpperCase()

snippet pmdSkip
	SuppressWarnings({"PMD.NPathComplexity", "PMD.ExcessiveMethodLength"})

snippet jsonType
	if (json.has("zzz")) {
		Object aObj = json.get("zzz");
		if(aObj instanceof JSONArray){
			json.getJSONArray("cust_category");
		}   
	}   

snippet reg
	Pattern p = Pattern.compile("embed/[a-zA-Z0-9-]+");
	Matcher m = p.matcher("embed/zzz");
	if (m.find()) {
		string id = m.group();
		id = id.substring(6);
	}

snippet splitToList
	Arrays.asList("aa,aa".split(","));

snippet explode
	str.split("\04");

snippet forFields
	for (Field f : this.getClass().getDeclaredFields()) {
		if (f.getName().equals(key)) {
			return (int) f.get(this);
		}
	}

snippet enumFor
	for (Enum e: Enum.values()) {
		e.name();
	}

snippet urlencode
	java.net.URLEncoder.decode(url, "UTF-8");

snippet urldecode
	java.net.URLDecoder.decode(url, "UTF-8");


snippet base64decode
	Base64.decodeBase64(str);

snippet guavacachedef
	private static Cache<String, String> localMemCache;
	static {
		localMemCache = CacheBuilder.newBuilder()
			.expireAfterWrite(CACHE_TIMEOUT, TimeUnit.SECONDS)
			.recordStats()
			.build();
	}

snippet guavacachecode
	String token = localMemCache.get(TOKEN_CACHE_PREFIX + Id,
	new Callable<String>() {
		@Override
		public String call() {
			String t = fetchName(id);
			return t;
		}
	});

snippet guicecode
	bind(xx.class);
	bind(xxInterface.class).to(xxImplements.class);

snippet guicecodesingleton
	bind(xx.class).toInstace(obj);

snippet stringtobuyte
	"aa".getBytes()

# ------------------
# Exception Handling
# ------------------

snippet as
	assert ${1:test} : "${2:Failure message}";
snippet ae
	assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
snippet aae
	assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
snippet af
	assertFalse("${1:Failure message}", ${2:condition});
snippet at
	assertTrue("${1:Failure message}", ${2:condition});
snippet an
	assertNull("${1:Failure message}", ${2:object});
snippet ann
	assertNotNull("${1:Failure message}", ${2:object});
snippet ass
	assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet asns
	assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet fa
	fail("${1:Failure message}");
snippet ca
	catch(${1:Exception} ${2:e}) ${0}
snippet thr
	throw ${0}
snippet ths
	throws ${0}
snippet try
	try {

	} catch (Exception e) {

	}



## unit test
snippet mockFuture
	final Future<String> future = mock(Future.class);
	when(future.get()).thenReturn("xxx");

snippet mockDoNothing
	doNothing().when(client).disconnect();

