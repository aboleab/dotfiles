
let php_sync_method=-1

call plug#begin('~/.vim/plugged')
" ----------------
" Basic plugins
" ----------------
Plug 'google/vim-maktaba'
Plug 'junegunn/fzf', { 'do': './install --all' } " File finder


" ----------------
" UI Plugins
" ----------------
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'majutsushi/tagbar' " methond/function list menu
Plug 'haya14busa/incsearch.vim' " better search plugin
"Plug 'airblade/vim-gitgutter'
"Plugin 'ntpeters/vim-better-whitespace' " show tail whitespace
Plug 'ap/vim-css-color' " show color for color ticket
Plug 'nathanaelkane/vim-indent-guides'

if g:enablePluginsLightLine == 1
    Plug 'itchyny/lightline.vim'
endif

Plug 'tpope/vim-obsession'
Plug 'dominickng/fzf-session.vim'

" ----------------
" Themes
" ----------------
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'junegunn/seoul256.vim'

" ----------------
" Code change Plugins
" ----------------
"http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plug 'godlygeek/tabular' " align code
Plug 'vim-scripts/vim-json-line-format' " JSON Parse
Plug 'vim-scripts/PDV--phpDocumentor-for-Vim', {'for': 'php'}
Plug 'puritys/vim-cterm-to-gui', {'for': 'vim'}

"" code format
"Plugin 'google/vim-codefmt'
"Plugin 'google/vim-glaive'
Plug '2072/PHP-Indenting-for-VIm', {'for': 'php'}

" -------------
" Auto Complete
" -------------
"Plug 'ervandew/supertab'
if version > 800
    Plug 'Valloric/YouCompleteMe'
endif
Plug '1995eaton/vim-better-javascript-completion', {'for': 'javascript'}
Plug 'shawncplus/phpcomplete.vim', {'for': 'php'} 

" Snippet
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'

" ----------------
" Execute command
" ----------------
" Execute self file
Plug 'thinca/vim-quickrun'

" ----------------
" Others
" ----------------
Plug 'vim-syntastic/syntastic' " syntax check
if version > 800
    Plug 'w0rp/ale'
endif

" others
"Plug 'takac/vim-hardtime' " prevent repeat typing
Plug 'Raimondi/delimitMate'
"Plug 'pangloss/vim-javascript' " javascript hightlight, better indent
"Plug 'groenewege/vim-less'    " less highlight, indent, autocomplete
"Plug 'fatih/vim-go'           " Golang
"Plug 'airblade/vim-gitgutter'
" Menu to remember command
"Plug 'skywind3000/quickmenu.vim'


call plug#end()

" =============== "
" Plugin Settings "
" =============== "


""" Theme
colors mystyle_white "dracula, seoul256, seoul256-light

"""" Git Gutter
"map <F3> :GitGutterToggle<CR>
"let g:gitgutter_realtime = 0 "trade accuracy for speed
"let g:gitgutter_eager = 0 "trade accuracy for speed
"hi GitGutterAdd ctermfg=green
"hi GitGutterDeleteLine ctermfg=red
""hi GitGutterChange GitGutterChangeDeleteLine 
""let g:gitgutter_sign_added = '+'
""let g:gitgutter_sign_modified = 'm'
""let g:gitgutter_sign_removed = '-'


" ----------------
" Airline settings
" ----------------
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs
set term=xterm-256color
set termencoding=utf-8
let g:airline_extensions = ['syntastic', 'tagbar']
let g:airline_powerline_fonts = 1
let g:airline_theme='minimalist'
"let g:airline#extensions#tabline#enabled=1
"let g:airline#extensions#tabline#fnamemod=':t' "only show the filaname
"let g:airline#extensions#whitespace#enabled=0 "disable whitespace trailing

" ---------------------------------
" Enable maktabe / codeformat / log
" ---------------------------------
if !empty(glob("~/.vim/plugged/vim-maktaba"))
    let g:maktaba = maktaba#Maktaba()
    let g:vroom_logger = maktaba#log#Logger('DEFAULT')
    "call g:vroom_logger.log().SetNotificationLevel(g:maktaba#log#LEVELS.ERROR)
    "call g:vroom_logger.Error('my')
    "call g:vroom_logger.Debug('Test')
endif

"call glaive#Install()
"Glaive codefmt plugin[mappings]
"Glaive codefmt google_java_executable="java -jar /usr/local/lib/google-java-format-1.4-all-deps.jar"
"augroup autoformat_settings
"  autocmd FileType bzl AutoFormatBuffer buildifier
"  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
"  autocmd FileType dart AutoFormatBuffer dartfmt
"  autocmd FileType go AutoFormatBuffer gofmt
"  autocmd FileType gn AutoFormatBuffer gn
"  autocmd FileType html,css,json AutoFormatBuffer js-beautify
"  autocmd FileType java AutoFormatBuffer google-java-format
"  autocmd FileType python AutoFormatBuffer yapf
"  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
"augroup END

" incsearch
"if exists('g:loaded_incsearch')

if version > 720
    if !empty(glob("~/.vim/plugged/incsearch.vim"))

        if has("unix")
            let s:uname = system("uname -s")
            if s:uname == "Darwin\n"
            else
                set hlsearch
                let g:incsearch#auto_nohlsearch = 0 " 0: keep hightlight when mouse cursor move
                map /  <Plug>(incsearch-forward)
            endif
        endif
    endif
endif

" -----------------
" NerdTree settings
" -----------------

map <C-f> :NERDTreeToggle<CR> " open NerdTree tab
" show line
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" show hidden file
let NERDTreeShowHidden=1
" set with
let NERDTreeWinSize=31
" skip specific file extensions
let NERDTreeIgnore=['\~$', '\.swp', '\.swo']
" show bookmark
let NERDTreeShowBookmarks=1
let g:NERDTreeGlyphReadOnly=0
let g:NERDTreeDirArrowExpandable=1
let g:NERDTreeDirArrowCollapsible=1


" ----------------
" JavaImp settings
" Java import plugin
" ----------------

" A dir to save JavaImp settings and cache files
let g:JavaImpDataDir = $HOME . "/.vim/JavaImp"
" Java Source code path
let g:JavaImpPaths = $HOME . "/openjdk/openjdk/jdk/src/share/classes/"
" :JIG create dir, :JI Auto add import file, :JIS  sort the import list,  :JIF  find the source on your scursor
"imap <c-i> <c-c>:JI<CR>i

" ----------------
" Snippet settings
" ----------------
"let g:snippets_dir='~/.vim/bundle/vim-snipmate/snippets/'
let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
let g:snipMate.scope_aliases = {}
let g:snipMate.no_default_aliases = 1

let g:snipMate.scope_aliases['javascript'] = 'core_javascript'
let g:snipMate.scope_aliases['html'] = 'core_html,js'
let g:snipMate.scope_aliases['php'] = 'core_php,core_html'
let g:snipMate.scope_aliases['inc'] = 'core_php'
let g:snipMate.scope_aliases['xml'] = 'mvn_pom'
let g:snipMate.scope_aliases['java'] = 'java'
let g:snipMate.scope_aliases['python'] = 'py'
let g:snipMate.scope_aliases['vim'] = 'vim'

" snippet remap
"let g:snips_no_mappings = 1
"let s:overwrite = maparg('<Tab>', 'i') ==? '<Plug>SuperTabForward'
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateNextOrTrigger', 'i')
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateNextOrTrigger', 's')
"let s:overwrite = 0
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateVisual', 'x')


" -------------
" eclim
" -------------
let g:EclimLogLevel="error"
let g:EclimJavaValidate=1
let g:EclimJavaCheckstyleOnSave=1
"let g:EclimMavenPomClasspathUpdate = 1 " Cannot add correct dependencies if it include properties.

" -----------------------
" vim-syntastic/syntastic
" -----------------------
"let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_php_checkers = ['php']
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_w = 0
let g:syntastic_mode_map={'mode': 'passive'}

"" pangloss/vim-javascript start
"let g:javascript_plugin_jsdoc = 1
"let g:javascript_plugin_ngdoc = 1
"let g:javascript_plugin_flow = 1
"" pangloss/vim-javascript end


"" Tagbar Command
" :TagbarToggle

"" QuickMenu
"let g:quickmenu_options = "HL"
"noremap <silent><F1> :call quickmenu#toggle(0)<cr>
"call quickmenu#reset()
"call quickmenu#append('# Main', '')
"call quickmenu#append('Function List', 'TagbarToggle', "F2")
"call quickmenu#append('NERDTree', 'NERDTree', "tree")
"call quickmenu#append('Find Files', "call fzf#run({'sink':'tabe', 'down': '40%'})", "Ctrl+p")




"""""""""""""""""
" YouCompleteMe "
"""""""""""""""""
if !empty(glob("~/.vim/plugged/YouCompleteMe"))
    let g:ycm_auto_trigger = 0
    let g:ycm_min_num_of_chars_for_completion = 1
    "let g:ycm_min_num_identifier_candidate_chars = 0
    "let g:ycm_max_num_candidates = 50 " maxmum
    ""let g:ycm_filetype_whitelist = { '*': 1 }
    ""let g:ycm_show_diagnostics_ui = 1
    ""let g:ycm_complete_in_comments = 1
    ""let g:ycm_key_list_previous_completion = ['<C-TAB>']
    let g:ycm_key_invoke_completion = '<C-d>'
    let g:ycm_key_list_select_completion = ['<Down>']
    let g:ycm_key_list_stop_completion = ['<CR>']
    let g:ycm_disable_for_files_larger_than_kb = 1000

    " debug :YcmDebugInfo
    "let g:ycm_keep_logfiles = 1 
    "let g:ycm_log_level = 'debug'
endif

"""""""""""""""""
" Autopair"
"""""""""""""""""
let g:AutoPairsMapCR = 0

"" js complete
let g:vimjs#casesensistive = 1
" Enabled by default. flip the value to make completion matches case
" insensitive
"
let g:vimjs#smartcomplete = 0
" " Disabled by default. Enabling this will let vim complete matches at any
" location
" " e.g. typing 'ocument' will suggest 'document' if enabled.
"
let g:vimjs#chromeapis = 0
" " Disabled by default. Toggling this will enable completion for a number of
" Chrome's JavaScript extension APIs

" ----------------
" Qickrun settings
" ----------------
if !empty(glob("~/.vim/plugged/vim-quickrun"))
    :nnoremap <C-e> <CR>:QuickRun<CR>
    :vnoremap <C-e> :QuickRun -mode v<CR>
endif


" --------------
" PHP Auto Complete
" shawncplus/phpcomplete.vim
" --------------
let g:phpcomplete_min_num_of_chars_for_namespace_completion = 1
let g:phpcomplete_cache_taglists = 1
let g:phpcomplete_enhance_jump_to_definition = 0

" fzf-session
let g:fzf_session_path="/tmp/fzf_session"



if !empty(glob("~/.vim/plugged/vim-indent-guides"))
    let g:indent_guides_auto_colors = 0
    let g:indent_guides_guide_size = 1
    map :indent<CR> :IndentGuidesToggle<CR>
endif

" --------------
" ale 
" --------------
let g:ale_lint_delay = 1000
let g:airline#extensions#ale#enabled=0
let g:ale_sign_warning = 'W>'
let g:ale_sign_error = 'E>'
let g:ale_lint_on_enter = 1
if version > 800
    if !empty(glob("~/.vim/plugged/ale"))
        autocmd FileType java nmap sc :ALELint<CR>
    endif
endif

" --------------
" light line
" --------------

if !empty(glob("~/.vim/plugged/lightline.vim"))

let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename' ] ],
      \ },
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ],
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ },
      \ }
let g:lightline.enable = {
            \ 'statusline': 1,
            \ 'tabline': 1
            \ }
endif

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

let g:JavaImpDataDir="/tmp/JavaImp"

