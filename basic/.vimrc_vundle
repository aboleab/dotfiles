set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'junegunn/fzf'
Plugin 'google/vim-maktaba'

" JSON parse
Plugin 'coldnight/pretty_json.vim'
Plugin 'vim-json-line-format'

" Execute self file
Plugin 'thinca/vim-quickrun'

" Menu to remember command
"Plugin 'skywind3000/quickmenu.vim'

Plugin 'vim-syntastic/syntastic'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'haya14busa/incsearch.vim'
Plugin 'majutsushi/tagbar'

" Snippet
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'

"http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plugin 'godlygeek/tabular'

Plugin '1995eaton/vim-better-javascript-completion'

" Auto Complete
"Plugin 'Valloric/YouCompleteMe'

"" Airline
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'


"" Auto complete
"Plugin 'ervandew/supertab'

"" code format
"Plugin 'google/vim-codefmt'
"Plugin 'google/vim-glaive'

" others
"Plugin 'takac/vim-hardtime' " prevent repeat typing
"Plugin 'Raimondi/delimitMate'
"Plugin 'pangloss/vim-javascript' " javascript hightlight, better indent
"Plugin 'groenewege/vim-less'    " less highlight, indent, autocomplete
"Plugin 'fatih/vim-go'           " Golang
"Plugin 'airblade/vim-gitgutter'

call vundle#end()


""""""" Plugin Settings """"""""""""""

"""" Git Gutter
"map <F3> :GitGutterToggle<CR>
"let g:gitgutter_realtime = 0 "trade accuracy for speed
"let g:gitgutter_eager = 0 "trade accuracy for speed
"hi GitGutterAdd ctermfg=green
"hi GitGutterDeleteLine ctermfg=red
""hi GitGutterChange GitGutterChangeDeleteLine 
""let g:gitgutter_sign_added = '+'
""let g:gitgutter_sign_modified = 'm'
""let g:gitgutter_sign_removed = '-'
""
"" vim airline
"set laststatus=2   " Always show the statusline
"set encoding=utf-8 " Necessary to show Unicode glyphs
"set term=xterm-256color
"set termencoding=utf-8
"let g:airline_powerline_fonts = 1
"let g:airline_theme='silver'
""let g:airline#extensions#tabline#enabled=1
"""let g:airline#extensions#tabline#fnamemod=':t' "only show the filaname
""let g:airline#extensions#whitespace#enabled=0 "disable whitespace trailing
""detection
"""buffer
"set hidden "hide unwritten buffer if new buffer is opened
"

"" Enable maktabe / codefmt		 +"" Enable maktabe log
let g:maktaba = maktaba#Maktaba()
let g:vroom_logger = maktaba#log#Logger('DEFAULT')
"call g:maktaba#log#SetNotificationLevel(g:maktaba#log#LEVELS.ERROR)
"call g:vroom_logger.Debug('Test')
"call g:vroom_logger.Error('my')


"" NerdTree start "
map <C-f> :NERDTreeToggle<CR> " open NerdTree tab
" show line
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" show hidden file
let NERDTreeShowHidden=1
" set with
let NERDTreeWinSize=31
" skip specific file extensions
let NERDTreeIgnore=['\~$', '\.swp', '\.swo']
" show bookmark
let NERDTreeShowBookmarks=1
let g:NERDTreeGlyphReadOnly=0
let g:NERDTreeDirArrowExpandable=1
let g:NERDTreeDirArrowCollapsible=1
"" NerdTree end "

"" JavaImp Start
" A dir to save JavaImp settings and cache files
let g:JavaImpDataDir = $HOME . "/.vim/JavaImp"
" Java Source code path
let g:JavaImpPaths = $HOME . "/openjdk/openjdk/jdk/src/share/classes/"
" :JIG create dir, :JI Auto add import file, :JIS  sort the import list,  :JIF  find the source on your scursor
"imap <c-i> <c-c>:JI<CR>i
"" JavaImp End


"" Snippet Start
"let g:snippets_dir='~/.vim/bundle/vim-snipmate/snippets/'
"call ExtractSnipsFile(g:snippets_dir.'javascript.snippets', 'javascript')
"call ExtractSnipsFile(g:snippets_dir.'php.snippets', 'php')
" call ExtractSnipsFile(g:snippets_dir.'myCustomSnippets.snippets',
" 'javascript')
let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
let g:snipMate.scope_aliases = {}
let g:snipMate.no_default_aliases = 1

let g:snipMate.scope_aliases['javascript'] = 'core_javascript'
let g:snipMate.scope_aliases['html'] = 'core_html,js'
let g:snipMate.scope_aliases['php'] = 'core_php,core_html'
let g:snipMate.scope_aliases['inc'] = 'core_php'
let g:snipMate.scope_aliases['xml'] = 'mvn_pom'
let g:snipMate.scope_aliases['java'] = 'java'

" remap
"let g:snips_no_mappings = 1
"let s:overwrite = maparg('<Tab>', 'i') ==? '<Plug>SuperTabForward'
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateNextOrTrigger', 'i')
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateNextOrTrigger', 's')
"let s:overwrite = 0
"call s:map_if_not_mapped('<Tab>', '<Plug>snipMateVisual', 'x')


"" Snippet End

"" ntpeters/vim-better-whitespace start
highlight ExtraWhitespace ctermbg=251
"" ntpeters/vim-better-whitespace end

"" eclim start
let g:EclimLogLevel="error"
let g:EclimJavaValidate=1
let g:EclimJavaCheckstyleOnSave=1
"let g:EclimMavenPomClasspathUpdate = 1 " Cannot add correct dependencies if it include properties.
"" eclim end

"" airline start
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='simple'
"" airline end

"" Hard time start
let g:hardtime_default_on = 1
let g:hardtime_timeout = 50
"let g:hardtime_allow_different_key = 1
let g:list_of_normal_keys = []
let g:list_of_visual_keys = []
let g:list_of_insert_keys = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
let g:list_of_disabled_keys = []
"" Hard time end

"" vim-syntastic/syntastic start
"let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_php_checkers = ['php']
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_w = 0
let g:syntastic_mode_map={'mode': 'passive'}
"" vim-syntastic/syntastic end

" pangloss/vim-javascript start
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
" pangloss/vim-javascript end

""FZF start
""FZF end

" incsearch
if has("unix")
    let s:uname = system("uname -s")
    if s:uname == "Darwin\n"
    else
        set hlsearch
        let g:incsearch#auto_nohlsearch = 1 " 0: keep hightlight when mouse cursor move
        map /  <Plug>(incsearch-forward)
    endif
endif

"" Enable maktabe / codefmt
"call glaive#Install()
"Glaive codefmt plugin[mappings]
"Glaive codefmt google_java_executable="java -jar /usr/local/lib/google-java-format-1.4-all-deps.jar"

"augroup autoformat_settings
"  autocmd FileType bzl AutoFormatBuffer buildifier
"  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
"  autocmd FileType dart AutoFormatBuffer dartfmt
"  autocmd FileType go AutoFormatBuffer gofmt
"  autocmd FileType gn AutoFormatBuffer gn
"  autocmd FileType html,css,json AutoFormatBuffer js-beautify
"  autocmd FileType java AutoFormatBuffer google-java-format
"  autocmd FileType python AutoFormatBuffer yapf
"  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
"augroup END


"" Tagbar Command
" :TagbarToggle

"" QuickMenu
"let g:quickmenu_options = "HL"
"noremap <silent><F1> :call quickmenu#toggle(0)<cr>
"call quickmenu#reset()
"call quickmenu#append('# Main', '')
"call quickmenu#append('Function List', 'TagbarToggle', "F2")
"call quickmenu#append('NERDTree', 'NERDTree', "tree")
"call quickmenu#append('Find Files', "call fzf#run({'sink':'tabe', 'down': '40%'})", "Ctrl+p")




""" YouCompleteMe
"let g:ycm_auto_trigger = 1
"let g:ycm_min_num_of_chars_for_completion = 1
"let g:ycm_min_num_identifier_candidate_chars = 0
"let g:ycm_max_num_candidates = 50 " maxmum
""""let g:ycm_filetype_whitelist = { '*': 1 }
""let g:ycm_show_diagnostics_ui = 1
""let g:ycm_complete_in_comments = 1
""let g:ycm_key_list_previous_completion = ['<C-TAB>']
"let g:ycm_key_invoke_completion = '<C-d>'

let g:vimjs#casesensistive = 1
" Enabled by default. flip the value to make completion matches case
" insensitive
"
let g:vimjs#smartcomplete = 0
" " Disabled by default. Enabling this will let vim complete matches at any
" location
" " e.g. typing 'ocument' will suggest 'document' if enabled.
"
let g:vimjs#chromeapis = 0
" " Disabled by default. Toggling this will enable completion for a number of
" Chrome's JavaScript extension APIs


" Quickrun
:nnoremap <C-e> <CR>:QuickRun<CR>
:vnoremap <C-e> :QuickRun -mode v<CR>




